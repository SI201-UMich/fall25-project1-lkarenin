# Name: Karen Lin
# Student ID: 07134248
# Email: linkaren@umich.edu
# Collaborators: Lilly Joelson
# Karen's Functions:


# Name: Lillian Joelson
# Student ID: 
# Email: 
# Collaborators: Karen Lin
# Lilly's Functions: 

import csv
import unittest

def load_data(filename):
    data = []
    with open(filename) as inFile:
        reader = csv.DictReader(inFile)
        next(reader)

        for row in reader:
            data.append(row)
    
    return data



# Karen: calculate the ratio of avg_bill_length / avg_bill_depth of most popular island

# 1. find most popular island (max_island)

def calculate_max_island(data):
    island_freqs = {}

    for penguin in data:
        island = penguin['island']
        if island not in island_freqs:
            island_freqs[island] = 1
        else: # the island is in the island list
            island_freqs[island] += 1 

    max_freq = 0
    max_island = ''

    for island, freq in island_freqs.items():
        if freq > max_freq:
            max_freq = freq
            max_island = island
    
    # print(f'The island in which most penguins reside in is the {max_island} island.')
    return max_island

# 2. in that island, calculate avg bill length, avg bill depth, and ratio
def calculate_bill_ratios(data, max_island):

    max_island_data = [] # output: 
    total_length = 0
    total_depth = 0

    for penguin in data:
        if penguin['island'] == max_island:
            max_island_data.append(penguin)
            # print(max_island_data)

            for penguin in max_island_data:
                print(penguin)
                total_length += penguin[3]
                print(total_length)
                total_depth += penguin[4]
                print(total_depth)

    # avg_length = total_length / len()

# max_island_count
# ISLAND
# avg_bill_length
# BILL LENGTH
# avg_bill_depth
# BILL DEPTH





# MAIN

def main():
    data = load_data("penguins.csv")

    most_pop_island = calculate_max_island(data)
    bill_ratio = calculate_bill_ratios(data, most_pop_island)

if __name__ == "__main__":
    main()



# test cases for the calculation methods
